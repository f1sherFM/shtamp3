#Module 4 
import pandas as pd

def transform_data(df):
    """
    Преобразует и очищает данные.

    Args:
        df (pd.DataFrame): Исходный DataFrame.

    Returns:
        pd.DataFrame: Преобразованный DataFrame.
    """

    # 1. Преобразование типов данных
    # Попробуем преобразовать столбцы, которые должны быть числовыми
    for col in df.columns:
        if df[col].dtype == 'object':  # Проверяем, является ли столбец строковым
            try:
                df[col] = pd.to_numeric(df[col]) # Convert to numeric if possible
                print(f"Столбец '{col}' успешно преобразован в числовой тип.")
            except ValueError:
                print(f"Не удалось преобразовать столбец '{col}' в числовой тип. Оставляем как есть.")
                pass # Оставляем как есть, если не удалось преобразовать

    # Преобразование столбцов с датами (пример - вам нужно адаптировать под ваши столбцы)
    date_columns = ['booking_date', 'check_in_date', 'check_out_date']  # Список столбцов с датами
    for col in date_columns:
        if col in df.columns:
            try:
                df[col] = pd.to_datetime(df[col], errors='coerce')  # Преобразуем в datetime, невалидные значения заменяем на NaT
                print(f"Столбец '{col}' успешно преобразован в тип datetime.")
            except ValueError:
                print(f"Не удалось преобразовать столбец '{col}' в тип datetime. Проверьте формат даты.")

    # 2. Очистка данных
    # Удаление дубликатов
    df = df.drop_duplicates()
    print("Дубликаты удалены.")

    # Обработка пропущенных значений
    # Заполнение пропущенных числовых значений средним (можно заменить на медиану или другое значение)
    for col in df.select_dtypes(include=['number']):
        if df[col].isnull().any():  # Проверяем, есть ли пропущенные значения в столбце
            mean_value = df[col].mean()
            df[col] = df[col].fillna(mean_value)
            print(f"Пропущенные значения в столбце '{col}' заполнены средним значением ({mean_value:.2f}).")

    # Заполнение пропущенных строковых значений (например, пустой строкой)
    for col in df.select_dtypes(include=['object']):
        if df[col].isnull().any():
            df[col] = df[col].fillna('')  # Заполняем пустой строкой
            print(f"Пропущенные значения в столбце '{col}' заполнены пустой строкой.")

    # Удаление строк с оставшимися пропущенными значениями (если это необходимо)
    #df = df.dropna()  # Удаление строк, где остались пропущенные значения. Закомментировал, т.к. выше уже обработал
    #print("Строки с оставшимися пропущенными значениями удалены.")


    # 3. Преобразование значений
    # Пример: Приведение текстовых значений к нижнему регистру (для единообразия)
    for col in df.select_dtypes(include=['object']):
        df[col] = df[col].str.lower()
        print(f"Значения в столбце '{col}' приведены к нижнему регистру.")

    # Пример: Нормализация числовых данных (например, масштабирование)
    # from sklearn.preprocessing import MinMaxScaler
    # scaler = MinMaxScaler()
    # df[['price', 'rating']] = scaler.fit_transform(df[['price', 'rating']]) #Пример нормализации

    # 4. Фильтрация данных (пример - фильтрация по цене)
    # df = df[df['price'] > 0] #Удаляем записи с ценой меньше или равной нулю

    print("Трансформация данных завершена.")
    return df
# Пояснения 
# Преобразование типов данных:
'''
Цикл for col in df.columns: перебирает все столбцы DataFrame.
df[col].dtype == 'object' проверяет, является ли столбец строковым (обычно так pandas определяет столбцы, содержащие текст).
pd.to_numeric(df[col], errors='coerce') пытается преобразовать столбец в числовой тип. Если преобразование не удается, errors='coerce' заменяет невалидные значения на NaN (Not a Number). Это важно, чтобы избежать ошибок при дальнейших операциях.
Аналогично для столбцов с датами, используется pd.to_datetime. errors='coerce' обрабатывает неверные форматы дат, заменяя их на NaT (Not a Time).
Сообщения print() помогают отслеживать, какие столбцы были успешно преобразованы, а какие нет.
Удаление дубликатов:

df = df.drop_duplicates() удаляет строки, которые полностью совпадают.
Обработка пропущенных значений (NaN):

df.select_dtypes(include=['number']) выбирает только столбцы с числовыми данными. Это позволяет избежать ошибок при попытке вычисления среднего значения для текстовых столбцов.
df[col].isnull().any() проверяет, есть ли в столбце пропущенные значения.
df[col].mean() вычисляет среднее значение столбца (без учета NaN).
df[col].fillna(mean_value) заполняет пропущенные значения средним значением.
Аналогичная логика применяется для заполнения пропущенных строковых значений пустой строкой.
Преобразование значений:

df[col].str.lower() приводит все строки в столбце к нижнему регистру. Это полезно для унификации данных и упрощения сравнения строк.
Фильтрация данных (пример):

Позволяет фильтровать записи, например, по цене.
'''
